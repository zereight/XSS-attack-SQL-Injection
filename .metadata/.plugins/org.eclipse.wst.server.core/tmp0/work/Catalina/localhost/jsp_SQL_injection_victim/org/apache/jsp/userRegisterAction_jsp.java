/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.38
 * Generated at: 2019-03-26 14:00:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import user.UserDTO;
import user.UserDAO;
import java.io.PrintWriter;

public final class userRegisterAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("user.UserDTO");
    _jspx_imports_classes.add("user.UserDAO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");


	request.setCharacterEncoding("UTF-8");

	if( session.getAttribute("userId") != null ){
		PrintWriter p = response.getWriter();
		p.println("<script>");
		p.println("alert('이미 로그인되어 있습니다.');");
		p.println("location.href='./index.jsp';");
		p.println("</script>");
		p.close();
		return;
	}
	
	String userId = null;
	String userPassword = null;
	
	if ( request.getParameter("userId") != null ){
		userId = request.getParameter("userId");
	}

	if ( request.getParameter("userPassword") != null ){
		if(request.getParameter("userPasswordAgain") != null){
			if( ((String)request.getParameter("userPassword")).equals((String)request.getParameter("userPasswordAgain")) )	{
				userPassword = request.getParameter("userPassword");
			} else {
				PrintWriter p = response.getWriter();
				p.println("<script>");
				p.println("alert('비밀번호를 다시 확인해주세요.');");
				p.println("location.href='./userRegister.jsp';");
				p.println("</script>");
				p.close();
				return;
			}
		}
		
	}
	
	if( userId == null || userPassword == null ){
		PrintWriter p = response.getWriter();
		p.println("<script>");
		p.println("alert('입력이 안된 사항이 있습니다.');");
		p.println("location.href='./userRegister.jsp';");
		p.println("</script>");
		p.close();
		return;
	} else {
		
		try{
			
			int result = new UserDAO().join(new UserDTO(userId, userPassword));

			if(result == -1){
				PrintWriter p = response.getWriter();
				p.println("<script>");
				p.println("alert('회원가입에 실패했습니다. 이미 존재하는 ID일수 있습니다.');");
				p.println("location.href='./userRegister.jsp';");
				p.println("</script>");
				p.close();
				return;
			} else {
				session.setAttribute("userId", userId);
				PrintWriter p = response.getWriter();
				p.println("<script>");
				p.println("alert('회원가입이 정상적으로 완료되었습니다..');");
				p.println("location.href='./index.jsp';");
				p.println("</script>");
				p.close();
				return;
			}
			
			
		}catch(Exception e){
			e.printStackTrace();
		}
		
	}
	
	
	


    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
